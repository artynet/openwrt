From 4d9d02ce4a9f9de496f60ce7f846297af9c975aa Mon Sep 17 00:00:00 2001
From: Davide Ciminaghi <ciminaghi@gnudd.com>
Date: Thu, 8 May 2014 15:21:29 +0200
Subject: [PATCH 942/973] MCUIO: mcuio-hc-drv: add code for sending requests to
 devices.

Signed-off-by: Davide Ciminaghi <ciminaghi@gnudd.com>
---
 drivers/mcuio/mcuio-hc-drv.c | 309 ++++++++++++++++++++++++++++++++++++++++++-
 include/linux/mcuio-hc.h     |  29 ++++
 include/linux/mcuio.h        |  47 +++++++
 3 files changed, 382 insertions(+), 3 deletions(-)
 create mode 100644 include/linux/mcuio-hc.h

diff --git a/drivers/mcuio/mcuio-hc-drv.c b/drivers/mcuio/mcuio-hc-drv.c
index f671b99..57ca372 100644
--- a/drivers/mcuio/mcuio-hc-drv.c
+++ b/drivers/mcuio/mcuio-hc-drv.c
@@ -13,17 +13,320 @@
 #include <linux/device.h>
 #include <linux/slab.h>
 #include <linux/types.h>
+#include <linux/regmap.h>
+#include <linux/workqueue.h>
+#include <linux/kthread.h>
+#include <linux/mutex.h>
 
 #include <linux/mcuio.h>
 #include <linux/mcuio_ids.h>
+#include <linux/mcuio-proto.h>
+#include <linux/mcuio-hc.h>
 
-static int mcuio_host_controller_probe(struct mcuio_device *dev)
+#include "mcuio-internal.h"
+
+struct mcuio_request;
+
+typedef void (*___request_cb)(struct mcuio_request *);
+
+/* Host controller data */
+struct mcuio_hc_data {
+	unsigned bus;
+	struct mutex lock;
+	struct list_head request_queue;
+	struct list_head pending_requests;
+	atomic_t removing;
+
+	struct kthread_worker tx_kworker;
+	struct task_struct *tx_kworker_task;
+	struct kthread_work send_messages;
+};
+
+typedef int (*mcuio_copy)(uint32_t *, const uint32_t *, int, int);
+
+int __mcuio_copyb(uint32_t *dst, const uint32_t *src, int fill, int ntoh)
+{
+	if (!fill) {
+		*(uint8_t *)dst = *(uint8_t *)src;
+		return sizeof(uint8_t);
+	}
+	memcpy(dst, src, sizeof(uint64_t));
+	return sizeof(uint64_t);
+}
+
+int __mcuio_copyw(uint32_t *__dst, const uint32_t *__src, int fill, int ntoh)
+{
+	uint16_t *dst = (uint16_t *)__dst;
+	uint16_t *src = (uint16_t *)__src;
+	int i, n = fill ? sizeof(uint64_t) / sizeof(uint16_t) : 1;
+	for (i = 0; i < n; i++)
+		*dst++ = ntoh ? mcuio_ntohs(*src++) : mcuio_htons(*src++);
+	return n * sizeof(uint16_t);
+}
+
+int __mcuio_copydw(uint32_t *dst, const uint32_t *src, int fill, int ntoh)
+{
+	*dst++ = mcuio_ntohl(*src++);
+	if (fill)
+		*dst++ = ntoh ? mcuio_ntohl(*src++) : mcuio_htonl(*src++);
+	return fill ? sizeof(uint64_t) : sizeof(uint32_t);
+}
+
+static const mcuio_copy __copy_table[] = {
+	[ mcuio_type_rdb ] = __mcuio_copyb,
+	[ mcuio_type_wrb ] = __mcuio_copyb,
+	[ mcuio_type_rdw ] = __mcuio_copyw,
+	[ mcuio_type_wrw ] = __mcuio_copyw,
+	[ mcuio_type_rddw ] = __mcuio_copydw,
+	[ mcuio_type_wrdw ] = __mcuio_copydw,
+	/* Unsupported */
+	[ mcuio_type_rdq ] = NULL,
+	[ mcuio_type_wrq ] = NULL,
+};
+
+static int __copy_data(uint32_t *addr, struct mcuio_packet *p, int ntoh)
+{
+	mcuio_copy cp = __copy_table[mcuio_packet_type(p) &
+				     mcuio_actual_type_mask];
+	uint32_t *__dst = ntoh ? addr : p->data;
+	uint32_t *__src = ntoh ? p->data : addr;
+	if (!cp)
+		return -ENOSYS;
+	return cp(__dst, __src, mcuio_packet_is_fill_data(p),
+		  ntoh ? mcuio_packet_is_read(p) : !mcuio_packet_is_read(p));
+}
+
+static struct mcuio_request *mcuio_alloc_request(struct mcuio_device *mdev)
+{
+	struct mcuio_request *out = devm_kzalloc(&mdev->dev, sizeof(*out),
+						 GFP_KERNEL);
+	if (!out)
+		dev_err(&mdev->dev, "not enough memory for mcuio request\n");
+	return out;
+}
+
+
+static void mcuio_free_request(struct mcuio_request *r)
+{
+	struct mcuio_hc_data *data;
+	data = dev_get_drvdata(&r->hc->dev);
+	mutex_lock(&data->lock);
+	list_del(&r->list);
+	mutex_unlock(&data->lock);
+	if (!r->dont_free)
+		devm_kfree(&r->hc->dev, r);
+}
+
+
+static void __request_to_packet(struct mcuio_request *r, struct mcuio_packet *p)
+{
+	mcuio_packet_set_addr(p, r->hc->bus, r->dev, r->func, r->offset,
+			      r->type, r->fill);
+	if (mcuio_packet_is_read(p)) {
+		p->data[0] = p->data[1] = 0;
+		return;
+	}
+	/* Copy data to packet (host to network) */
+	__copy_data(r->data, p, 0);
+}
+
+static struct mcuio_request *__make_request(struct mcuio_device *mdev,
+					    unsigned dev, unsigned func,
+					    unsigned type,
+					    int fill,
+					    unsigned offset, ___request_cb cb)
+{
+	struct mcuio_request *out = mcuio_alloc_request(mdev);
+	if (!out)
+		return NULL;
+	out->hc = mdev;
+	out->dev = dev;
+	out->func = func;
+	out->type = type;
+	out->offset = offset;
+	out->status = -ETIMEDOUT;
+	out->cb = cb;
+	out->fill = fill;
+	return out;
+}
+
+static void __request_timeout(struct work_struct *work)
+{
+	struct mcuio_request *r =
+		container_of(work, struct mcuio_request, to_work.work);
+	if (r->cb)
+		r->cb(r);
+	mcuio_free_request(r);
+}
+
+static int __write_message(struct regmap *map, const u32 *ptr, int count)
+{
+	int i, stat;
+	for (i = 0; i < count; i++) {
+		stat = regmap_write(map,
+				    MCUIO_HC_OUTBUF + i * sizeof(u32), ptr[i]);
+		if (stat < 0)
+			return stat;
+	}
+	return 0;
+}
+
+static int __do_request(struct mcuio_hc_data *data)
+{
+	struct mcuio_request *r;
+	struct mcuio_device *mdev;
+	struct regmap *map;
+	u32 buf[4];
+	struct mcuio_packet *p = (struct mcuio_packet *)buf;
+
+	mutex_lock(&data->lock);
+	if (list_empty(&data->request_queue)) {
+		mutex_unlock(&data->lock);
+		return 0;
+	}
+	r = list_entry(data->request_queue.next, struct mcuio_request, list);
+	__request_to_packet(r, p);
+	mdev = r->hc;
+	map = dev_get_regmap(&mdev->dev, NULL);
+	if (!map) {
+		mutex_unlock(&data->lock);
+		WARN_ON(1);
+		return -EIO;
+	}
+	list_move(&r->list, &data->pending_requests);
+	mutex_unlock(&data->lock);
+	/* Schedule timeout */
+	INIT_DELAYED_WORK(&r->to_work, __request_timeout);
+	/* FIXME: WHAT IS THE CORRECT DELAY ? */
+	schedule_delayed_work(&r->to_work, HZ/10);
+	if (__write_message(map, buf, 4) < 0) {
+		dev_err(&mdev->dev, "error writing to output fifo");
+		goto regmap_error;
+	}
+	return 1;
+
+regmap_error:
+	cancel_delayed_work_sync(&r->to_work);
+	mcuio_free_request(r);
+	return -EIO;
+}
+
+static void __send_messages(struct kthread_work *work)
+{
+	struct mcuio_hc_data *data =
+		container_of(work, struct mcuio_hc_data, send_messages);
+	while (__do_request(data) > 0);
+}
+
+static void __enqueue_request(struct mcuio_device *mdev,
+			      struct mcuio_hc_data *data,
+			      struct mcuio_request *r)
+{
+	mutex_lock(&data->lock);
+	list_add_tail(&r->list, &data->request_queue);
+	mutex_unlock(&data->lock);
+	queue_kthread_work(&data->tx_kworker, &data->send_messages);
+}
+
+static int mcuio_hc_enqueue_request(struct mcuio_request *r)
+{
+	struct mcuio_hc_data *data;
+	if (!r || !r->hc)
+		return -EINVAL;
+	data = dev_get_drvdata(&r->hc->dev);
+	if (!data)
+		return -EINVAL;
+	if (atomic_read(&data->removing))
+		return -ENODEV;
+	__enqueue_request(r->hc, data, r);
+	return 0;
+}
+
+static void __request_cb(struct mcuio_request *r)
+{
+	struct completion *c = r->cb_data;
+	complete(c);
+}
+
+int mcuio_submit_request(struct mcuio_request *r)
+{
+	int ret;
+	DECLARE_COMPLETION_ONSTACK(request_complete);
+	r->cb = __request_cb;
+	r->cb_data = &request_complete;
+	r->status = -ETIMEDOUT;
+	ret = mcuio_hc_enqueue_request(r);
+	if (!ret)
+		ret = wait_for_completion_interruptible(&request_complete);
+	if (ret)
+		return ret;
+	return r->status;
+}
+EXPORT_SYMBOL(mcuio_submit_request);
+
+static int mcuio_host_controller_probe(struct mcuio_device *mdev)
+{
+	struct mcuio_hc_data *data;
+	struct mcuio_hc_platform_data *plat;
+	struct regmap *map;
+	int ret = -ENOMEM;
+	/* Only manage local host controllers */
+	if (mdev->device)
+		return -ENODEV;
+	plat = dev_get_platdata(&mdev->dev);
+	if (!plat) {
+		dev_err(&mdev->dev, "No platform data\n");
+		return -EINVAL;
+	}
+	map = plat->setup_regmap(&mdev->dev, plat);
+	if (IS_ERR(map)) {
+		dev_err(&mdev->dev, "Error setting up regmap for device\n");
+		return PTR_ERR(map);
+	}
+	data = devm_kzalloc(&mdev->dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return ret;
+	dev_set_drvdata(&mdev->dev, data);
+	atomic_set(&data->removing, 0);
+	mutex_init(&data->lock);
+	init_kthread_worker(&data->tx_kworker);
+	data->tx_kworker_task = kthread_run(kthread_worker_fn,
+					    &data->tx_kworker,
+					    "%s_%s",
+					    dev_name(&mdev->dev), "tx");
+	if (IS_ERR(data->tx_kworker_task)) {
+		dev_err(&mdev->dev, "failed to create message tx task\n");
+		return -ENOMEM;
+	}
+	init_kthread_work(&data->send_messages, __send_messages);
+	INIT_LIST_HEAD(&data->request_queue);
+	INIT_LIST_HEAD(&data->pending_requests);
+	dev_set_drvdata(&mdev->dev, data);
+	return 0;
+}
+
+static void __cleanup_outstanding_requests(struct mcuio_hc_data *data)
 {
-	return -ENODEV;
+	struct mcuio_request *r, *tmp;
+	list_for_each_entry_safe(r, tmp, &data->pending_requests, list) {
+		pr_debug("%s %d: freeing request %p\n", __func__,
+			 __LINE__, r);
+		cancel_delayed_work_sync(&r->to_work);
+		if (r->cb)
+			r->cb(r);
+		mcuio_free_request(r);
+	}
 }
 
-static int mcuio_host_controller_remove(struct mcuio_device *dev)
+static int mcuio_host_controller_remove(struct mcuio_device *mdev)
 {
+	struct mcuio_hc_data *data = dev_get_drvdata(&mdev->dev);
+	atomic_set(&data->removing, 1);
+	barrier();
+	flush_kthread_worker(&data->tx_kworker);
+	kthread_stop(data->tx_kworker_task);
+	__cleanup_outstanding_requests(data);
+	devm_kfree(&mdev->dev, data);
 	return 0;
 }
 
diff --git a/include/linux/mcuio-hc.h b/include/linux/mcuio-hc.h
new file mode 100644
index 0000000..bbcf9a5
--- /dev/null
+++ b/include/linux/mcuio-hc.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2011 Dog Hunter SA
+ * Author: Davide Ciminaghi <ciminaghi@gnudd.com>
+ *
+ * Header file for mcuio host controller
+ *
+ * GNU GPLv2 or later
+ */
+#ifndef __HOST_CONTROLLER_H__
+#define __HOST_CONTROLLER_H__
+
+#define MCUIO_HC_OUTBUF 0x8
+
+struct regmap;
+
+typedef struct regmap *(*setup_regmap)(struct device *, void *data);
+
+/*
+ * Platform data for host controller
+ *
+ * @setup_regmap: pointer to function setting up a regmap for controller
+ * @data: data to be passed on to setup_regmap.
+ */
+struct mcuio_hc_platform_data {
+	setup_regmap setup_regmap;
+	void *data;
+};
+
+#endif /* __HOST_CONTROLLER_H__ */
diff --git a/include/linux/mcuio.h b/include/linux/mcuio.h
index d78b302..be6c804 100644
--- a/include/linux/mcuio.h
+++ b/include/linux/mcuio.h
@@ -59,6 +59,53 @@ int mcuio_device_register(struct mcuio_device *dev,
 			  struct device *parents);
 void mcuio_device_unregister(struct mcuio_device *dev);
 
+struct mcuio_request;
+
+typedef void (*request_cb)(struct mcuio_request *);
+
+/*
+ * This represents an mcuio request
+ * @hc: pointer to host controller mcuio device
+ * @dev: destination device
+ * @func: destination function
+ * @offset: offset within function address space
+ * @type: request type
+ * @cb: pointer to callback function
+ * @cb_data: callback data.
+ * @status: status of request (0 completed OK, -EXXXX errors)
+ * @data: request data
+ * @list: used for enqueueing requests
+ * @to_work: delayed_work struct for request timeout management
+ * @priv: private data. FIX THIS
+ * @dont_free: this flag is !0 when request shall not be kfree'd
+ * @fill: if this is !0 the resulting request packet shall have its fill data
+ *        flag set
+ */
+struct mcuio_request {
+	struct mcuio_device *hc;
+	unsigned dev;
+	unsigned func;
+	unsigned offset;
+	unsigned type;
+	request_cb cb;
+	void *cb_data;
+	int status;
+	uint32_t data[2];
+	struct list_head list;
+	struct delayed_work to_work;
+	void *priv;
+	int dont_free;
+	int fill;
+};
+
+/*
+ * Submit a request, block until request done
+ *
+ * @r: pointer to request
+ */
+int mcuio_submit_request(struct mcuio_request *r);
+
+
 #endif /* __KERNEL__ */
 
 #endif /* __MCUIO_H__ */
-- 
1.8.5.2.233.g932f7e4

