From 4411ee7dff27da6cf09e3fa7ddcabae90c609cba Mon Sep 17 00:00:00 2001
From: Aurelio Colosimo <aurelio@aureliocolosimo.it>
Date: Mon, 28 Jul 2014 11:03:50 +0200
Subject: [PATCH 12/47] pwm: removed mcuio-pwm.c, it will be rewritten in
 drivers/pwm/mcuio-pwm.c

Signed-off-by: Aurelio Colosimo <aurelio@aureliocolosimo.it>
---
 drivers/mcuio/Kconfig     |    7 -
 drivers/mcuio/Makefile    |    3 +-
 drivers/mcuio/mcuio-pwm.c |  315 ---------------------------------------------
 3 files changed, 1 insertion(+), 324 deletions(-)
 delete mode 100644 drivers/mcuio/mcuio-pwm.c

diff --git a/drivers/mcuio/Kconfig b/drivers/mcuio/Kconfig
index 8780de3..4d53948 100644
--- a/drivers/mcuio/Kconfig
+++ b/drivers/mcuio/Kconfig
@@ -36,10 +36,3 @@ config MCUIO_ADC
 	default y
 	help
 	  Adds a driver for analog to digital converters (experimental)
-
-config MCUIO_PWM
-	tristate "mcuio PWM driver"
-	depends on MCUIO
-	default y
-	help
-	  Adds a driver for pulse width modulation outputs (experimental)
diff --git a/drivers/mcuio/Makefile b/drivers/mcuio/Makefile
index e1fcacf..dc626d0 100644
--- a/drivers/mcuio/Makefile
+++ b/drivers/mcuio/Makefile
@@ -8,5 +8,4 @@ obj-$(CONFIG_MCUIO) += mcuio.o mcuio-hc-drv.o mcuio-hc-dev.o mcuio-soft-hc.o
 obj-$(CONFIG_MCUIO_LDISC_HC) += mcuio-hc-ldisc.o
 obj-$(CONFIG_MCUIO_IRQ_CTRL) += mcuio-irq-ctrl.o
 obj-$(CONFIG_MCUIO_JS_SHIELD) += mcuio-js-shield.o
-obj-$(CONFIG_MCUIO_ADC) += mcuio-adc.o
-obj-$(CONFIG_MCUIO_PWM) += mcuio-pwm.o
\ No newline at end of file
+obj-$(CONFIG_MCUIO_ADC) += mcuio-adc.o
\ No newline at end of file
diff --git a/drivers/mcuio/mcuio-pwm.c b/drivers/mcuio/mcuio-pwm.c
deleted file mode 100644
index 9556ba2..0000000
--- a/drivers/mcuio/mcuio-pwm.c
+++ /dev/null
@@ -1,315 +0,0 @@
-/*
- * Copyright 2014 Dog Hunter SA
- * Author: Aurelio Colosimo <aurelio@aureliocolosimo.it>
- *
- * GNU GPLv2 or later
- */
-
-/* mcuio driver for PWM outputs */
-#define DEBUG 1
-
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/init.h>
-#include <linux/device.h>
-#include <linux/slab.h>
-#include <linux/types.h>
-#include <linux/regmap.h>
-#include <linux/workqueue.h>
-#include <linux/irq.h>
-#include <linux/interrupt.h>
-#include <linux/hid.h>
-#include <linux/platform_device.h>
-
-
-#include <linux/mcuio.h>
-#include <linux/mcuio_ids.h>
-#include <linux/mcuio-proto.h>
-
-#include "mcuio-internal.h"
-
-static struct class *mcuio_pwm_class;
-
-static const struct regmap_config mcuio_pwm_regmap_config = {
-	.reg_bits = 32,
-	.val_bits = 32,
-	.max_register = 0xffc,
-	.cache_type = REGCACHE_NONE,
-};
-
-
-struct mcuio_pwm_out {
-	const char *name;
-	int mcu_idx;
-	struct device *dev;
-	struct pwm_data *data;
-};
-
-/* Mapping from mcu gpio to board inputs */
-struct mcuio_pwm_out linino_one_out[] = {
-	{
-		.name = "D11",
-		.mcu_idx = 0,
-	},
-	{
-		.name = "D3",
-		.mcu_idx = 1,
-	},
-	{
-		.name = "D9",
-		.mcu_idx = 2,
-	},
-	{
-		.name = "D10",
-		.mcu_idx = 3,
-	},
-	{
-		.name = NULL,
-	}
-};
-
-struct pwm_data {
-	struct mcuio_pwm_out *out;
-	struct regmap *map;
-	struct device *dev;
-};
-
-#define __regmap_read(m, a, v) \
-	if (regmap_read(m, a, v)) \
-		dev_err(dev, "I/O error in %s\n", __func__); \
-
-#define __regmap_write(m, a, v) \
-	if (regmap_write(m, a, v)) \
-		dev_err(dev, "I/O error in %s\n", __func__);
-
-
-static inline void mcuio_pwm_disable(struct pwm_data *data) {
-	regmap_write(data->map, 0x14, 0);
-}
-
-/* sysfs interface begin */
-
-static ssize_t show_value(struct device *dev, struct device_attribute *attr,
-			char *buf)
-{
-	uint32_t val;
-	uint32_t addr;
-	struct mcuio_pwm_out *out = dev_get_drvdata(dev);
-
-	addr = 0x040 * (out->mcu_idx + 1) + 0x08;
-	__regmap_read(out->data->map, addr, &val);
-	return sprintf(buf, "%d", val);
-}
-
-static ssize_t store_value(struct device *dev, struct device_attribute *attr,
-			 const char *buf, size_t count)
-{
-	uint32_t val;
-	uint32_t addr;
-	struct mcuio_pwm_out *out = dev_get_drvdata(dev);
-
-	kstrtoul(buf, 10, (unsigned long*)&val);
-	addr = 0x040 * (out->mcu_idx + 1) + 0x08;
-	__regmap_write(out->data->map, addr, val);
-	return count;
-}
-
-static ssize_t show_nbits(struct device *dev, struct device_attribute *attr,
-			char *buf)
-{
-	/* FIXME: to be read from bathos-mcuio */
-	return sprintf(buf, "8");
-}
-
-static ssize_t show_enable(struct device *dev, struct device_attribute *attr,
-			char *buf)
-{
-	uint32_t en = 0;
-	uint32_t addr;
-	struct mcuio_pwm_out *out = dev_get_drvdata(dev);
-	addr = 0x040 * (out->mcu_idx + 1) + 0x0c;
-	__regmap_read(out->data->map, addr, &en);
-	return sprintf(buf, "%u", en & 0x1);
-}
-
-static ssize_t store_enable(struct device *dev, struct device_attribute *attr,
-			 const char *buf, size_t count)
-{
-	uint32_t _en, en_new;
-	uint32_t addr;
-	struct mcuio_pwm_out *out = dev_get_drvdata(dev);
-
-	addr = 0x040 * (out->mcu_idx + 1) + 0x0c;
-
-	__regmap_read(out->data->map, addr, &_en);
-
-	en_new = (buf[0] - '0') & 0x1;
-
-	__regmap_write(out->data->map, addr, (_en & ~0x1) | en_new);
-
-	return count;
-}
-
-static DEVICE_ATTR(value, 0664, show_value, store_value);
-static DEVICE_ATTR(nbits, 0444, show_nbits, NULL);
-static DEVICE_ATTR(enable, 0644, show_enable, store_enable);
-
-static struct attribute *pwm_out_dev_attrs[] = {
-	&dev_attr_value.attr,
-	&dev_attr_nbits.attr,
-	&dev_attr_enable.attr,
-	NULL,
-};
-
-struct attribute_group pwm_out_dev_attr_group = {
-	.attrs = pwm_out_dev_attrs,
-};
-
-static int out_devs_create(struct pwm_data *data)
-{
-	struct mcuio_pwm_out *out = data->out;
-
-	mcuio_pwm_class = class_create(THIS_MODULE, "mcuio_pwm");
-	while (out->name) {
-
-		out->data = data;
-
-		out->dev = device_create(mcuio_pwm_class, data->dev,
-			MKDEV(0, out - data->out), out, out->name);
-
-		if (!out->dev) {
-			dev_err(data->dev, "error creating dev %s\n",
-				out->name);
-			return -ENOMEM;
-		}
-
-		sysfs_create_group(&out->dev->kobj,
-					&pwm_out_dev_attr_group);
-		out++;
-	}
-
-	return 0;
-}
-
-static void out_devs_destroy(struct pwm_data *data)
-{
-	struct mcuio_pwm_out *out = data->out;
-	while (out->name) {
-		if (out->dev) {
-			device_destroy(mcuio_pwm_class,
-				       MKDEV(0, out - data->out));
-			out->dev = NULL;
-		}
-		out++;
-	}
-	class_destroy(mcuio_pwm_class);
-	mcuio_pwm_class = NULL;
-}
-
-/* sysfs interface end */
-
-static int mcuio_pwm_probe(struct mcuio_device *mdev)
-{
-	int ret;
-	struct pwm_data *data = NULL;
-	struct regmap *map = NULL;
-	struct mcuio_device *hc = to_mcuio_dev(mdev->dev.parent);
-
-	if (!hc) {
-		dev_err(&mdev->dev, "no parent for device\n");
-		return -EINVAL;
-	}
-
-	map = devm_regmap_init_mcuio(mdev, &mcuio_pwm_regmap_config);
-
-	if (IS_ERR(map)) {
-		dev_err(&mdev->dev, "cannot setup regmap for device\n");
-		return PTR_ERR(map);
-	}
-
-	data = devm_kzalloc(&mdev->dev, sizeof(*data), GFP_KERNEL);
-
-	if (!data) {
-		dev_err(&mdev->dev, "error creating pwm_data\n");
-		ret = -ENOMEM;
-		goto fail1;
-	}
-
-	data->map = map;
-
-	pr_debug("mcuio pwm is %u:%u:%u\n",
-		 mdev->bus, mdev->device, mdev->fn);
-
-	data->out = linino_one_out;
-	data->dev = &mdev->dev;
-
-	dev_set_drvdata(&mdev->dev, data);
-
-	ret = sysfs_create_link(&hc->dev.kobj, &mdev->dev.kobj, "pwm");
-	if (ret)
-		goto fail1;
-
-	if (out_devs_create(data))
-		goto fail2;
-
-	return 0;
-
-fail2:
-	sysfs_remove_link(&hc->dev.kobj, "pwm");
-fail1:
-	return ret;
-}
-
-static int mcuio_pwm_remove(struct mcuio_device *mdev)
-{
-	struct pwm_data *data = dev_get_drvdata(&mdev->dev);
-	struct mcuio_device *hc = to_mcuio_dev(mdev->dev.parent);
-
-	pr_debug("removing mcuio pwm %u:%u:%u\n",
-		 mdev->bus, mdev->device, mdev->fn);
-	BUG_ON(!data);
-
-	out_devs_destroy(data);
-
-	sysfs_remove_link(&hc->dev.kobj, "pwm");
-
-	return 0;
-}
-
-static const struct mcuio_device_id pwm_drv_ids[] = {
-	{
-		.class = MCUIO_CLASS_PWM,
-		.class_mask = 0xffff,
-	},
-	/* Terminator */
-	{
-		.device = MCUIO_NO_DEVICE,
-		.class = MCUIO_CLASS_UNDEFINED,
-	},
-};
-
-static struct mcuio_driver mcuio_pwm_driver = {
-	.driver = {
-		.name = "mcuio-pwm",
-	},
-	.id_table = pwm_drv_ids,
-	.probe = mcuio_pwm_probe,
-	.remove = mcuio_pwm_remove,
-};
-
-static int __init mcuio_pwm_init(void)
-{
-	return mcuio_driver_register(&mcuio_pwm_driver, THIS_MODULE);
-}
-
-static void __exit mcuio_pwm_exit(void)
-{
-	mcuio_driver_unregister(&mcuio_pwm_driver);
-}
-
-subsys_initcall(mcuio_pwm_init);
-module_exit(mcuio_pwm_exit);
-
-MODULE_AUTHOR("Aurelio Colosimo");
-MODULE_DESCRIPTION("MCUIO driver for PWM");
-MODULE_LICENSE("GPL v2");
-- 
1.7.9.5

