From bb29c1b57c3ac126905e8429c815336da6698901 Mon Sep 17 00:00:00 2001
From: Aurelio Colosimo <aurelio@aureliocolosimo.it>
Date: Tue, 23 Sep 2014 15:59:07 +0200
Subject: [PATCH] mcuio lucky shield: mma8491 pin reset handling implemented

Signed-off-by: Aurelio Colosimo <aurelio@aureliocolosimo.it>
---
 drivers/iio/accel/mma8491.c        |   15 +++++++++++++++
 drivers/mcuio/mcuio-lucky-shield.c |    4 +++-
 2 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/drivers/iio/accel/mma8491.c b/drivers/iio/accel/mma8491.c
index 1d048cb..ae1bf5e 100644
--- a/drivers/iio/accel/mma8491.c
+++ b/drivers/iio/accel/mma8491.c
@@ -15,6 +15,7 @@
 #include <linux/iio/buffer.h>
 #include <linux/iio/triggered_buffer.h>
 #include <linux/delay.h>
+#include <linux/gpio.h>
 
 #define MMA8491_STATUS 0x00
 #define MMA8491_OUT_X 0x01 /* MSB first, 14-bit  */
@@ -27,6 +28,7 @@ struct mma8491_data {
 	struct mutex lock;
 	u8 ctrl_reg1;
 	u8 data_cfg;
+	unsigned rst_gpio;
 };
 
 static int mma8491_drdy(struct mma8491_data *data)
@@ -69,9 +71,11 @@ static int mma8491_read_raw(struct iio_dev *indio_dev,
 		if (iio_buffer_enabled(indio_dev))
 			return -EBUSY;
 
+		gpio_set_value_cansleep(data->rst_gpio, 1);
 		mutex_lock(&data->lock);
 		ret = mma8491_read(data, buffer);
 		mutex_unlock(&data->lock);
+		gpio_set_value_cansleep(data->rst_gpio, 0);
 		if (ret < 0)
 			return ret;
 		*val = sign_extend32(
@@ -146,6 +150,7 @@ static int mma8491_probe(struct i2c_client *client,
 
 	data = iio_priv(indio_dev);
 	data->client = client;
+	data->rst_gpio = *((unsigned*)dev_get_platdata(&client->dev));
 	mutex_init(&data->lock);
 
 	i2c_set_clientdata(client, indio_dev);
@@ -157,6 +162,16 @@ static int mma8491_probe(struct i2c_client *client,
 	indio_dev->num_channels = ARRAY_SIZE(mma8491_channels);
 	indio_dev->available_scan_masks = mma8491_scan_masks;
 
+	ret = devm_gpio_request_one(&client->dev, data->rst_gpio,
+				GPIOF_OUT_INIT_LOW,
+				"mma8491-reset");
+
+	if (ret) {
+		dev_err(&client->dev, "failed to request gpio %d: %d\n",
+			data->rst_gpio, ret);
+		return ret;
+	}
+
 	ret = iio_triggered_buffer_setup(indio_dev, NULL,
 		mma8491_trigger_handler, NULL);
 	if (ret < 0)
diff --git a/drivers/mcuio/mcuio-lucky-shield.c b/drivers/mcuio/mcuio-lucky-shield.c
index 0a6a2c2..735c9e0 100644
--- a/drivers/mcuio/mcuio-lucky-shield.c
+++ b/drivers/mcuio/mcuio-lucky-shield.c
@@ -42,6 +42,7 @@ static unsigned short mag3110_addr = 0x0e;
 static unsigned short sht21_addr = 0x40;
 static unsigned short ssd1307_addr = 0x3c;
 static unsigned short mma8491_addr = 0x55;
+static unsigned int mma8491_rst = 120;
 module_param(pca9555_base, uint, 0644);
 module_param(pca9555_addr, ushort, 0644);
 module_param(mpl3115_addr, ushort, 0644);
@@ -49,6 +50,7 @@ module_param(mag3110_addr, ushort, 0644);
 module_param(sht21_addr, ushort, 0644);
 module_param(ssd1307_addr, ushort, 0644);
 module_param(mma8491_addr, ushort, 0644);
+module_param(mma8491_rst, uint, 0644);
 
 struct ssd1307_platform_data ssd1307_plat = {
 	.type = SSD1307_TYPE_1306,
@@ -64,7 +66,7 @@ static struct pca953x_platform_data pca9555_plat;
 static struct mcuio_shld_i2c_info i2c_lst[] = {
 	MCUIO_SHLD_I2C_DEV("pca9555", &pca9555_addr, &pca9555_plat, 122),
 	MCUIO_SHLD_I2C_DEV("mpl3115", &mpl3115_addr, NULL, -1),
-	MCUIO_SHLD_I2C_DEV("mma8491", &mma8491_addr, NULL, -1),
+	MCUIO_SHLD_I2C_DEV("mma8491", &mma8491_addr, &mma8491_rst, -1),
 	MCUIO_SHLD_I2C_DEV("mag3110", &mag3110_addr, NULL, -1),
 	MCUIO_SHLD_I2C_DEV("sht21", &sht21_addr, NULL, -1),
 	MCUIO_SHLD_I2C_DEV("ssd1307fb", &ssd1307_addr, &ssd1307_plat, -1),
-- 
1.7.9.5

