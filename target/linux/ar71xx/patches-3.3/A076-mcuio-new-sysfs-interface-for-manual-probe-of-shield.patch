From f7f13bb6bb0195b48ae254ba6173118b6415eca4 Mon Sep 17 00:00:00 2001
From: Aurelio Colosimo <aurelio@aureliocolosimo.it>
Date: Thu, 28 Aug 2014 15:07:33 +0200
Subject: [PATCH 076/115] mcuio: new sysfs interface for manual probe of
 shields

This patch adds three attributes to mcuio bus device:

/sys/devices/mcuio/shield_list
/sys/devices/mcuio/shield_register
/sys/devices/mcuio/shield_unregister

Type:

echo shieldname > /sys/devices/mcuio/shield_register

to probe the desired shield.

shield_list shows the name of the supported shields. When a shield
has been probed, its name is prepended by a '*'.

Signed-off-by: Aurelio Colosimo <aurelio@aureliocolosimo.it>
---
 arch/mips/configs/yun_linino_defconfig |   1 +
 drivers/mcuio/Kconfig                  |   8 ++
 drivers/mcuio/Makefile                 |   1 +
 drivers/mcuio/mcuio-shields-manprobe.c | 173 +++++++++++++++++++++++++++++++++
 4 files changed, 183 insertions(+)
 create mode 100644 drivers/mcuio/mcuio-shields-manprobe.c

diff --git a/arch/mips/configs/yun_linino_defconfig b/arch/mips/configs/yun_linino_defconfig
index 90ad71c..a21469a 100644
--- a/arch/mips/configs/yun_linino_defconfig
+++ b/arch/mips/configs/yun_linino_defconfig
@@ -2825,6 +2825,7 @@ CONFIG_MCUIO_LDISC_HC=y
 CONFIG_MCUIO_IRQ_CTRL=y
 CONFIG_MCUIO_JS_SHIELD=y
 CONFIG_MCUIO_LUCKY_SHIELD=y
+CONFIG_MCUIO_SHIELDS_MANUAL_PROBE=y
 CONFIG_MCUIO_ADC=y
 CONFIG_PWM=y
 CONFIG_PWM_SYSFS=y
diff --git a/drivers/mcuio/Kconfig b/drivers/mcuio/Kconfig
index 60f212a..f7b6b1b 100644
--- a/drivers/mcuio/Kconfig
+++ b/drivers/mcuio/Kconfig
@@ -37,6 +37,14 @@ config MCUIO_LUCKY_SHIELD
 	help
 	  Adds a driver for the Dog Hunter Lucky shield (experimental)
 
+config MCUIO_SHIELDS_MANUAL_PROBE
+	tristate "mcuio shields manual probe"
+	depends on (MCUIO_LUCKY_SHIELD || MCUIO_DIGITALIO_SHIELD)
+	default y
+	help
+	  Since autoprobe of mcuio shields is not implemented yet, this option
+	  makes it possible to manually register shields (experimental).
+
 config MCUIO_ADC
 	tristate "mcuio ADC driver"
 	depends on MCUIO
diff --git a/drivers/mcuio/Makefile b/drivers/mcuio/Makefile
index 31564a7..c5f7c50 100644
--- a/drivers/mcuio/Makefile
+++ b/drivers/mcuio/Makefile
@@ -9,4 +9,5 @@ obj-$(CONFIG_MCUIO_LDISC_HC) += mcuio-hc-ldisc.o
 obj-$(CONFIG_MCUIO_IRQ_CTRL) += mcuio-irq-ctrl.o
 obj-$(CONFIG_MCUIO_JS_SHIELD) += mcuio-js-shield.o
 obj-$(CONFIG_MCUIO_LUCKY_SHIELD) += mcuio-lucky-shield.o
+obj-$(CONFIG_MCUIO_SHIELDS_MANUAL_PROBE) += mcuio-shields-manprobe.o
 obj-$(CONFIG_MCUIO_ADC) += mcuio-adc.o
\ No newline at end of file
diff --git a/drivers/mcuio/mcuio-shields-manprobe.c b/drivers/mcuio/mcuio-shields-manprobe.c
new file mode 100644
index 0000000..f9f3549
--- /dev/null
+++ b/drivers/mcuio/mcuio-shields-manprobe.c
@@ -0,0 +1,173 @@
+/*
+ * Copyright 2014 Dog Hunter SA
+ * Author: Aurelio Colosimo <aurelio@aureliocolosimo.it>
+ *
+ * GNU GPLv2 or later
+ */
+
+#define DEBUG
+
+/* mcuio module for manual probe of shields */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/ctype.h>
+#include <linux/device.h>
+#include <linux/mcuio.h>
+#include <linux/mcuio_ids.h>
+
+#include "mcuio-internal.h"
+
+struct shld_probe_info {
+	char *name;
+	unsigned int dev_nr;
+	struct mcuio_device *mdev;
+	struct mcuio_device_id mdev_id;
+	int probed;
+};
+
+#define DH_SHLD(n, did, dnr) { \
+	.name = n, \
+	.dev_nr = dnr, \
+	.mdev_id = { \
+		.device = did, \
+		.vendor = MCUIO_VENDOR_DOGHUNTER, \
+		.class = MCUIO_CLASS_SHIELD, \
+		.class_mask = 0xffffffff,\
+	}\
+}
+
+struct shld_probe_info shld_list[] = {
+	DH_SHLD("lucky", MCUIO_DEVICE_LUCKY_SHIELD, 32),
+	{.name = NULL},
+};
+
+int shld_register(struct shld_probe_info *info)
+{
+	int ret = -ENOMEM;
+	struct mcuio_device *mdev;
+	struct mcuio_device *hc;
+
+	mdev = kzalloc(sizeof(*mdev), GFP_KERNEL);
+	if (!mdev)
+		return -ENOMEM;
+
+	mdev->id = info->mdev_id;
+	mdev->device = info->dev_nr;
+
+	hc = mcuio_bus_find_hc(mdev->bus);
+	if (!hc)
+		return -ENODEV;
+
+	pr_debug("mcuio shield: device = 0x%04x, vendor = 0x%04x, "
+		 "class = 0x%04x\n", mdev->id.device,
+		 mdev->id.vendor, mdev->id.class);
+
+	if (mcuio_device_register(mdev, NULL, &hc->dev) < 0) {
+		dev_err(&hc->dev,
+			"error registering device %u:%u.%u\n",
+			hc->bus, mdev->device, mdev->fn);
+		goto err0;
+	}
+
+	info->mdev = mdev;
+
+	return 0;
+
+err0:
+	kfree(mdev);
+	return ret;
+}
+
+void shld_unregister(struct shld_probe_info *info)
+{
+	mcuio_device_unregister(info->mdev);
+	info->mdev = NULL;
+}
+
+
+static int shld_probe(const char *shld_name)
+{
+	struct shld_probe_info *i;
+	for (i = shld_list; i->name; i++)
+		if (sysfs_streq(shld_name, i->name) && !i->probed) {
+			if (!shld_register(i))
+				i->probed = 1;
+			return 0;
+		}
+	return -EINVAL;
+}
+
+static void shld_remove(const char *shld_name)
+{
+	struct shld_probe_info *i;
+	for (i = shld_list; i->name; i++)
+		if (sysfs_streq(shld_name, i->name) && i->probed) {
+			shld_unregister(i);
+			i->probed = 0;
+		}
+}
+
+static ssize_t show_shld_list(struct device *dev, struct device_attribute *attr,
+			char *buf)
+{
+	struct shld_probe_info *i;
+	buf[0] = '\0';
+	for (i = shld_list; i->name; i++) {
+		if (i->probed)
+			strcat(buf, "* ");
+		else
+			strcat(buf, "  ");
+		strcat(buf, i->name);
+		strcat(buf, "\n");
+	}
+	return strlen(buf);
+}
+
+static DEVICE_ATTR(shield_list, S_IRUSR, show_shld_list, NULL);
+
+static ssize_t store_shld_register(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t count)
+{
+	int ret;
+	ret = shld_probe(buf);
+	if (ret)
+		dev_err(dev, "%s probe failed ret=%d\n", buf, ret);
+	return count;
+}
+
+static DEVICE_ATTR(shield_register, S_IWUSR, NULL, store_shld_register);
+
+static ssize_t store_shld_unregister(struct device *dev,
+				       struct device_attribute *attr,
+				       const char *buf, size_t count)
+{
+	shld_remove(buf);
+	return count;
+}
+
+static DEVICE_ATTR(shield_unregister, S_IWUSR, NULL, store_shld_unregister);
+
+static int __init shld_core_init(void)
+{
+	device_create_file(&mcuio_bus, &dev_attr_shield_list);
+	device_create_file(&mcuio_bus, &dev_attr_shield_register);
+	device_create_file(&mcuio_bus, &dev_attr_shield_unregister);
+	return 0;
+}
+
+static void __exit shld_core_exit(void)
+{
+	device_remove_file(&mcuio_bus, &dev_attr_shield_list);
+	device_remove_file(&mcuio_bus, &dev_attr_shield_register);
+	device_remove_file(&mcuio_bus, &dev_attr_shield_unregister);
+}
+
+late_initcall(shld_core_init);
+module_exit(shld_core_exit);
+
+MODULE_AUTHOR("Aurelio Colosimo");
+MODULE_DESCRIPTION("driver for MCUIO shields manual probe");
+MODULE_LICENSE("GPL v2");
-- 
1.9.1

