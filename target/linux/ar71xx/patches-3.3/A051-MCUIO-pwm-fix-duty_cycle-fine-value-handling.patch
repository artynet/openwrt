From d71c70af316a643b1007537dbd1e9e851865f4c0 Mon Sep 17 00:00:00 2001
From: Aurelio Colosimo <aurelio@aureliocolosimo.it>
Date: Thu, 31 Jul 2014 15:37:13 +0200
Subject: [PATCH 51/51] MCUIO pwm: fix duty_cycle fine value handling

Actual duty_cycle is (multiplier + 1) * resolution.

Signed-off-by: Aurelio Colosimo <aurelio@aureliocolosimo.it>
---
 drivers/pwm/pwm-mcuio.c |   15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/drivers/pwm/pwm-mcuio.c b/drivers/pwm/pwm-mcuio.c
index 14ec2fd..017d270 100644
--- a/drivers/pwm/pwm-mcuio.c
+++ b/drivers/pwm/pwm-mcuio.c
@@ -56,6 +56,7 @@ static int mcuio_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
 {
 	struct mcuio_pwm_data *data = to_mcuio_pwm_data(chip);
 	int idx = pwm_idx(pwm);
+	uint32_t duty_ticks;
 
 	if (!CAP_CH_PER(data->capab[idx]))
 		goto set_duty;
@@ -68,8 +69,14 @@ set_duty:
 	if (!CAP_CH_DC(data->capab[idx]))
 		goto done;
 
-	if (regmap_write(data->map, 0x040 * (idx + 1) + 0x14,
-		duty_ns / pwm->resolution))
+	duty_ticks = duty_ns / pwm->resolution;
+
+	/* minimum duty_cycle is pwm->resolution; if a constant signal
+	 * is needed, consider inverting polarity and setting
+	 * duty_cycle=period */
+	if (duty_ticks > 0)
+		duty_ticks -= 1;
+	if (regmap_write(data->map, 0x040 * (idx + 1) + 0x14, duty_ticks))
 		return -EIO;
 
 done:
@@ -158,7 +165,7 @@ static int mcuio_pwm_update_duty(struct pwm_chip *chip,
 	if (regmap_read(data->map, 0x040 * (idx + 1) + 0x14, &val))
 		return -EIO;
 
-	pwm->duty_cycle = val * pwm->resolution;
+	pwm->duty_cycle = (val + 1) * pwm->resolution;
 	return 0;
 }
 
@@ -253,7 +260,7 @@ static int mcuio_pwm_probe(struct mcuio_device *mdev)
 		regmap_read(data->map, 0x040 * (i + 1) + 0x08,
 			    &max_ticks);
 
-		data->chip.pwms[i].max = max_ticks *
+		data->chip.pwms[i].max = (max_ticks + 1) *
 			data->chip.pwms[i].resolution;
 	}
 	return ret;
-- 
1.7.9.5

