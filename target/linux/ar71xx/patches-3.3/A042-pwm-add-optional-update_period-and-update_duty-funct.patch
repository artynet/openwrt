From 4012229f2c4c55dee210213521930e1b470f3c71 Mon Sep 17 00:00:00 2001
From: Aurelio Colosimo <aurelio@aureliocolosimo.it>
Date: Mon, 28 Jul 2014 17:30:21 +0200
Subject: [PATCH 42/47] pwm: add optional update_period and update_duty
 functions to framework

Signed-off-by: Aurelio Colosimo <aurelio@aureliocolosimo.it>
---
 drivers/pwm/sysfs.c |   10 ++++++++--
 include/linux/pwm.h |   30 ++++++++++++++++++++----------
 2 files changed, 28 insertions(+), 12 deletions(-)

diff --git a/drivers/pwm/sysfs.c b/drivers/pwm/sysfs.c
index 13b9ce1..a2ab88e 100644
--- a/drivers/pwm/sysfs.c
+++ b/drivers/pwm/sysfs.c
@@ -45,7 +45,10 @@ static ssize_t pwm_period_show(struct device *child,
 			       struct device_attribute *attr,
 			       char *buf)
 {
-	const struct pwm_device *pwm = child_to_pwm_device(child);
+	struct pwm_device *pwm = child_to_pwm_device(child);
+
+	if (pwm->chip->ops->update_period)
+		pwm->chip->ops->update_period(pwm->chip, pwm);
 
 	return sprintf(buf, "%u\n", pwm->period);
 }
@@ -71,7 +74,10 @@ static ssize_t pwm_duty_cycle_show(struct device *child,
 				   struct device_attribute *attr,
 				   char *buf)
 {
-	const struct pwm_device *pwm = child_to_pwm_device(child);
+	struct pwm_device *pwm = child_to_pwm_device(child);
+
+	if (pwm->chip->ops->update_duty)
+		pwm->chip->ops->update_duty(pwm->chip, pwm);
 
 	return sprintf(buf, "%u\n", pwm->duty_cycle);
 }
diff --git a/include/linux/pwm.h b/include/linux/pwm.h
index 6252f7b..88e70cc 100644
--- a/include/linux/pwm.h
+++ b/include/linux/pwm.h
@@ -95,22 +95,12 @@ static inline void pwm_set_period(struct pwm_device *pwm, unsigned int period)
 		pwm->period = period;
 }
 
-static inline unsigned int pwm_get_period(struct pwm_device *pwm)
-{
-	return pwm ? pwm->period : 0;
-}
-
 static inline void pwm_set_duty_cycle(struct pwm_device *pwm, unsigned int duty)
 {
 	if (pwm)
 		pwm->duty_cycle = duty;
 }
 
-static inline unsigned int pwm_get_duty_cycle(struct pwm_device *pwm)
-{
-	return pwm ? pwm->duty_cycle : 0;
-}
-
 /*
  * pwm_set_polarity - configure the polarity of a PWM signal
  */
@@ -124,6 +114,8 @@ int pwm_set_polarity(struct pwm_device *pwm, enum pwm_polarity polarity);
  * @set_polarity: configure the polarity of this PWM
  * @enable: enable PWM output toggling
  * @disable: disable PWM output toggling
+ * @update_period (optional): refresh period reading from chip regs
+ * @update_duty (optional): refresh duty_cycle reading from chip regs
  * @dbg_show: optional routine to show contents in debugfs
  * @owner: helps prevent removal of modules exporting active PWMs
  */
@@ -142,6 +134,10 @@ struct pwm_ops {
 					  struct pwm_device *pwm);
 	void			(*disable)(struct pwm_chip *chip,
 					   struct pwm_device *pwm);
+	int			(*update_period)(struct pwm_chip *chip,
+					  struct pwm_device *pwm);
+	int			(*update_duty)(struct pwm_chip *chip,
+					  struct pwm_device *pwm);
 #ifdef CONFIG_DEBUG_FS
 	void			(*dbg_show)(struct pwm_chip *chip,
 					    struct seq_file *s);
@@ -168,6 +164,20 @@ struct pwm_chip {
 	struct pwm_device	*pwms;
 };
 
+static inline unsigned int pwm_get_period(struct pwm_device *pwm)
+{
+	if (pwm && pwm->chip->ops->update_period)
+		pwm->chip->ops->update_period(pwm->chip, pwm);
+	return pwm ? pwm->period : 0;
+}
+
+static inline unsigned int pwm_get_duty_cycle(struct pwm_device *pwm)
+{
+	if (pwm && pwm->chip->ops->update_duty)
+		pwm->chip->ops->update_duty(pwm->chip, pwm);
+	return pwm ? pwm->duty_cycle : 0;
+}
+
 #if IS_ENABLED(CONFIG_PWM)
 int pwm_set_chip_data(struct pwm_device *pwm, void *data);
 void *pwm_get_chip_data(struct pwm_device *pwm);
-- 
1.7.9.5

