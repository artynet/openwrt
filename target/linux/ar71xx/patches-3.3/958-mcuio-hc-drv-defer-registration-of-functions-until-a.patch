From a862e2b9844154d31b1bf8be441f387fcfe3933a Mon Sep 17 00:00:00 2001
From: Davide Ciminaghi <ciminaghi@gnudd.com>
Date: Fri, 9 May 2014 14:25:05 +0200
Subject: [PATCH 958/973] mcuio-hc-drv: defer registration of functions until
 an irq controller is found

Irqs can be assigned to each mcuio device only when an irq controller is found
on the mcu.

Signed-off-by: Davide Ciminaghi <ciminaghi@gnudd.com>
---
 drivers/mcuio/mcuio-hc-drv.c | 66 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 62 insertions(+), 4 deletions(-)

diff --git a/drivers/mcuio/mcuio-hc-drv.c b/drivers/mcuio/mcuio-hc-drv.c
index d2bb310..b484dde 100644
--- a/drivers/mcuio/mcuio-hc-drv.c
+++ b/drivers/mcuio/mcuio-hc-drv.c
@@ -33,12 +33,19 @@ struct mcuio_request;
 
 typedef void (*___request_cb)(struct mcuio_request *);
 
+struct mcuio_deferred_register_element {
+	struct mcuio_request r;
+	struct list_head list;
+};
+
 /* Host controller data */
 struct mcuio_hc_data {
 	unsigned bus;
 	struct mutex lock;
 	struct list_head request_queue;
 	struct list_head pending_requests;
+	/* List of descriptors not yet registered */
+	struct list_head to_be_registered;
 	atomic_t removing;
 
 	struct kthread_worker tx_kworker;
@@ -246,6 +253,12 @@ static irqreturn_t hc_irq_handler(int irq, void *__data)
 	return IRQ_HANDLED;
 }
 
+static inline int __is_irq_controller(struct mcuio_func_descriptor *d)
+{
+	return d->rev_class == MCUIO_CLASS_IRQ_CONTROLLER_PROTO ||
+		d->rev_class == MCUIO_CLASS_IRQ_CONTROLLER_WIRE;
+}
+
 static inline u32 __get_available(struct regmap *map)
 {
 	u32 out;
@@ -402,8 +415,10 @@ static int __do_one_enum(struct mcuio_device *mdev, unsigned edev,
 
 	r = __make_request(mdev, edev, efunc,
 			   mcuio_type_rddw, 1, 0, NULL);
-	if (!r)
+	if (!r) {
+		*out = NULL;
 		return -ENOMEM;
+	}
 	ret = mcuio_submit_request(r);
 	*out = r;
 	return ret;
@@ -463,18 +478,41 @@ static int __next_enum(unsigned *edev, unsigned *efunc, int *retry)
 	return 0;
 }
 
+static void __register_deferred_devices(struct mcuio_hc_data *data)
+{
+	struct mcuio_deferred_register_element *e, *tmp;
+	list_for_each_entry_safe(e, tmp, &data->to_be_registered, list) {
+		pr_debug("deferred registering of %u:%u.%u\n",
+			 e->r.hc->bus, e->r.dev, e->r.func);
+		__register_device(&e->r);
+		list_del(&e->list);
+		devm_kfree(&e->r.hc->dev, e);
+	}
+}
+
 static void __do_enum(struct kthread_work *work)
 {
 	struct mcuio_hc_data *data =
 		container_of(work, struct mcuio_hc_data, do_enum);
 	struct mcuio_device *mdev = data->mdev;
 	struct mcuio_request *r;
+	struct mcuio_deferred_register_element *e;
 	unsigned edev, efunc;
-	int stop_enum, stat, retry = -1;
+	struct mcuio_func_descriptor *d;
+	int stop_enum, irq_controller_found = 0, stat, retry = -1;
 
 	for (edev = 1, efunc = 0, stop_enum = 0; !stop_enum;
 	     stop_enum = __next_enum(&edev, &efunc, &retry)) {
+		if (!efunc) {
+			/* Register any pending devices for current mcu */
+			__register_deferred_devices(data);
+			irq_controller_found = 0;
+		}
 		stat = __do_one_enum(mdev, edev, efunc, &r);
+		if (!r) {
+			dev_err(&mdev->dev, "no request\n");
+			continue;
+		}
 		if (stat < 0) {
 			if (!r)
 				continue;
@@ -490,9 +528,28 @@ static void __do_enum(struct kthread_work *work)
 			continue;
 		}
 		retry = -1;
-		/* Found a new device, let's add it */
-		__register_device(r);
+		/*
+		  Found a new devices, let's add it, but only if an
+		  irq controller has already been found
+		*/
+		d = (struct mcuio_func_descriptor *)&r->data;
+		if (__is_irq_controller(d) || irq_controller_found) {
+			irq_controller_found = 1;
+			__register_device(r);
+			continue;
+		}
+		e = devm_kzalloc(&r->hc->dev, sizeof(*e), GFP_KERNEL);
+		if (!e) {
+			WARN_ON(1);
+			continue;
+		}
+		memcpy(&e->r, r, sizeof(*r));
+		list_add_tail(&e->list, &data->to_be_registered);
 	}
+	/*
+	 * Register any remaining pending devices
+	 */
+	__register_deferred_devices(data);
 }
 
 static int mcuio_host_controller_probe(struct mcuio_device *mdev)
@@ -548,6 +605,7 @@ static int mcuio_host_controller_probe(struct mcuio_device *mdev)
 	init_kthread_work(&data->send_messages, __send_messages);
 	INIT_LIST_HEAD(&data->request_queue);
 	INIT_LIST_HEAD(&data->pending_requests);
+	INIT_LIST_HEAD(&data->to_be_registered);
 	data->rx_thread = kthread_run(__receive_messages, mdev, "%s_%s",
 				      dev_name(&mdev->dev), "rx");
 	if (IS_ERR(data->rx_thread)) {
-- 
1.8.5.2.233.g932f7e4

