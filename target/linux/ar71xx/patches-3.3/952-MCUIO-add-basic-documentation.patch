From c2af28b6c108d2bb3dbed356f2717fa48aab6c37 Mon Sep 17 00:00:00 2001
From: Davide Ciminaghi <ciminaghi@gnudd.com>
Date: Fri, 9 May 2014 12:04:46 +0200
Subject: [PATCH 952/973] MCUIO: add basic documentation

---
 Documentation/mcuio/implementation.txt | 147 ++++++++++++++++++++++++++++
 Documentation/mcuio/maps/gpio.txt      |  54 +++++++++++
 Documentation/mcuio/protocol.txt       | 170 +++++++++++++++++++++++++++++++++
 Documentation/mcuio/tests.txt          |  85 +++++++++++++++++
 4 files changed, 456 insertions(+)
 create mode 100644 Documentation/mcuio/implementation.txt
 create mode 100644 Documentation/mcuio/maps/gpio.txt
 create mode 100644 Documentation/mcuio/protocol.txt
 create mode 100644 Documentation/mcuio/tests.txt

diff --git a/Documentation/mcuio/implementation.txt b/Documentation/mcuio/implementation.txt
new file mode 100644
index 0000000..de90e7d
--- /dev/null
+++ b/Documentation/mcuio/implementation.txt
@@ -0,0 +1,147 @@
+*** OVERVIEW ***
+
+This document briefly describes the mcuio subsystem implementation under Linux.
+As one can expect, a specific bus (the mcuio bus) has been introduced.
+
+
+*** DEVICE IDS ***
+
+All mcuio devices are identified by an 8 bytes data structure (the device
+descriptor located at the beginning of the device's memory area, see
+protocol.txt in this directory). Such descriptor corresponds to a
+struct mcuio_device_id, which is defined as follows:
+
+struct mcuio_device_id {
+	unsigned int device;
+	unsigned int vendor;
+	unsigned int class;
+	unsigned int class_mask;
+};
+
+The class_mask field is actually unused for devices, while it is useful for
+the bus layer for matching devices and drivers.
+
+
+
+*** DEVICE INSTANTIATION ***
+
+An mcuio device can be instantiated by calling mcuio_device_register():
+
+int mcuio_device_register(struct mcuio_device *dev,
+			  struct device_type *type,
+			  struct device *parent);
+
+where type can be NULL, in which case a default device_type is used.
+Custom device types can be specified in case special attributes or a custom
+release method is needed for a specific device.
+At the moment, default device attributes are the following [all of them are
+read only]:
+
+	* device : see field device in struct mcuio_device_id.
+	* vendor : see field vendor in struct mcuio_device_id.
+	* class : see field class in struct mcuio_device_id.
+	* bus : index of bus on which the device lives.
+	* dev : index of MCU on which the device lives.
+	* func: index of function corresponding to the device.
+
+
+
+*** DRIVERS ***
+
+An mcuio driver is represented by the following structure:
+
+struct mcuio_driver {
+	const struct mcuio_device_id	*id_table;
+	int (*probe)(struct mcuio_device *dev);
+	int (*remove)(struct mcuio_device *dev);
+	struct device_driver		driver;
+};
+
+where id_table is an array of device ids used by the bus layer to do
+device-driver matching. In particular, a driver is considered to match a device
+when:
+
+      * Its vendor & device id match those of the device.
+
+      OR
+
+      * The result of a bitwise AND between its class and class_mask
+        matches the class of the device.
+
+The id_table shall be terminated by an entry with null device id and class
+fields.
+An mcuio driver can be registered via mcuio_driver_register():
+
+int mcuio_driver_register(struct mcuio_driver *drv, struct module *owner);
+
+As usual, when a device is instantiated and a matching driver is found, the
+probe() method of the driver is invoked. The driver's probe() function shall
+return 0 if the driver can actually control the device, a negative value
+otherwise.
+
+
+
+*** ACCESSING MCUIO DEVICES ***
+
+The regmap abstraction has been used to access mcuio devices.
+Accesses to registers of a device's virtual memory map are translated into
+mcuio transactions on the specific physical layer.
+A specific regmap bus (regmap-mcuio) has been implemented (see file
+regmap-mcuio.c in the source code).
+Reads/Writes from/to mcuio devices are of course potentially blocking.
+
+
+
+*** HOST CONTROLLERS ***
+
+At present, there is no native "hardware" implementation of the mcuio protocol,
+so the host controller is actually some other kind of device, and everything
+is actually performed in software. For this reason, existing controllers
+(actually just one, the line discipline based controller, see below) are called
+soft-controllers, although an attempt was made to make them look like real
+hardware (they can even issue interrupts). This was done to give the user
+the same mechanism for interacting with mcuio devices, both actual and
+virtual ("soft").
+
+As stated in protocol.txt, an host controller is an mcuio device living on
+the MPU. Its memory map is the following:
+
+ Symbolic name  | offset  |  meaning
+----------------+---------+--------------------------
+MCUIO_HC_OUTBUF | 0x8     |  output fifo area
+MCUIO_HC_INBUF  | 0x108   |  input fifo area
+MCUIO_RX_CNT    | 0x208   |  counter of u32 words in input fifo
+MCUIO_IRQ       | 0x20c   |  contains the host controller's irq number
+MCUIO_IRQ_STAT  | 0x210   |  status register (bit 0 is set on rx ready)
+MCUIO_IRQ_CLR   | 0x214   |  write to this register to clear irq status bits
+
+The output FIFO area is just a FIFO: any u32 written to any address belonging
+to this area is actually stored into an output buffer. A packet is sent
+through the physical layer as soon as the output FIFO contains at least an
+mcuio packet.
+Similarly, data coming from the MCU are stored into a buffer and can be
+read throught the Input FIFO area.
+Since the host controller is local to the MPU, it has to be be accessed via a
+special no_bus regmap.
+The MCUIO_RX_CNT register contains the number of u32 words presently stored
+in the input fifo.
+The MCUIO_IRQ register contains the controller's irq line number.
+TODO: define and IRQ ENABLE register (presently the irq is __always__ enabled).
+
+Each host controller in the MPU has three associated kernel threads:
+
+     * rx: this thread cyclically calls regmap_read() on the host
+     controller's input FIFO area.
+     * tx: this thread is awakened when an output packet must be sent
+     to an MCU function.
+     * enum: this thread controls the enumeration process.
+
+Requests from MCUs are not handled at present.
+
+
+*** THE LINE DISCIPLINE HOST CONTROLLER ***
+
+This host controller is based on a line discipline, and can be associated to
+any terminal (or pseudo-terminal).
+This is used to get the mcuio protocol to work over an rs232 connection, and
+even over a socket (see tests.txt in this directory).
diff --git a/Documentation/mcuio/maps/gpio.txt b/Documentation/mcuio/maps/gpio.txt
new file mode 100644
index 0000000..4aaf9dd
--- /dev/null
+++ b/Documentation/mcuio/maps/gpio.txt
@@ -0,0 +1,54 @@
+
++----------------------------+ 0x8
+|      Port name             |     Symbolic name of gpio port.
++----------------------------+ 0xc
+|       number of gpios (n)  |     number of available gpios, max 64 (per func)
++----------------------------+ 0x10
+|	gpio0_label	     |	   label of gpio0 (max 4 bytes, str) (*)
++----------------------------+ 0x14
+|	gpio1_label	     |     label of gpio1 (max 4 bytes, str) (*)
++----------------------------+ 0x18
+|			     |
+|      ................      |
+|			     |
++----------------------------+ 0x10c
+|	gpio63_label         |     label of gpio63 (max 4 bytes, str) (*)
++----------------------------+ 0x110
+| mask for available gpio    |	   8 bits per gpio:
+| modes, gpios 0..7  	     |     00000000 -> unavailable
+|                            |	   00000001 -> input
+|                            |	   00000010 -> output
+|                            |     00000100 -> open drain
+| 			     |	   00001000 -> pull-up
+|			     |	   00010000 -> pull-down
+| 			     |     [ bits 5 - 7 are spare ]
+|			     |
++----------------------------+ 0x310
+| mask for available gpio    |	   8 bits per gpio:
+| event modes		     |	   00000001 -> rising edge
+| 			     |	   00000010 -> falling edge
+|			     |	   10000000 -> enable (bit 7 = 0 disables)
+|			     |     [ bits 2 - 6 are spare ]
+|			     |
++----------------------------+ 0x510
+| actual gpio modes	     |     (0 means disabled, maybe available to some
+| 	      		     |      other function).
++----------------------------+ 0x710
+| mask for actual gpio       |     8 bits per gpio
+| events   	     	     |
++----------------------------+ 0x910
+| gpio data		     |     current gpio status/output values (R/W)
+|      			     |
++----------------------------+ 0x918
+| gpio set                   |	   gpio set (gpio is set if corresponding bit
+|      			     |	   is set), write only
++----------------------------+ 0x920
+| gpio clear                 |	   gpio clr (gpio is cleared if corresponding
+|      			     |	   bit is set), write only
++----------------------------+ 0x928
+| gpio events status	     |	   1bit per gpio (1 -> event has been
+|			     |	   triggered).
++----------------------------+ 0x930
+
+(*) gpio labels are strings of max 4 chars. If shorter than 4 bytes, strings
+are 0 terminated.
diff --git a/Documentation/mcuio/protocol.txt b/Documentation/mcuio/protocol.txt
new file mode 100644
index 0000000..c42696c
--- /dev/null
+++ b/Documentation/mcuio/protocol.txt
@@ -0,0 +1,170 @@
+*** SYSTEM OVERVIEW ***
+
+A typical use case for the mcuio protocol is shown in the following diagram:
+
+
++---------------+      	    +------------+
+|		|   PHY     |		 |
+|      MPU     	|<--------->|    MCU	 |
+|      		|	    |	 	 |
++---------------+	    +------------+
+
+where:
+
+* MPU (MicroProcessor Unit) indicates a microprocessor based system, with
+(relatively) large memory and a full fledged operating system (Linux is the
+only supported OS at present).
+
+* MCU (MicroController Unit) indicates a microcontroller based system, with
+some 10s-100s KBytes RAM and a very simple os. Typical modern microcontrollers
+are equipped with many peripherals, such as GPIOs, A/Ds, D/As, PWM channels,
+Input capture/Output compare channels and so on.
+
+* PHY is any popular physical communication link, such as rs232, i2c, spi, ...
+
+The goal of the mcuio overall system is getting the MPU to easily control the
+MCU's peripherals. On the MCU side, a single device will be instantiated for
+each MCU's function.
+
+
+*** PROTOCOL OVERVIEW ***
+
+The protocol is as simple as possible: it just allows to read or write memory
+locations (bytes, words, dwords and quands). Frames have fixed size (16 bytes)
+with the following format:
+
+       4                    8  	     	   2         2
+     32 bits            64 bits		 16 bits    16 bits
++------------------+-------------------+---------+---------+
+| type & address   |      data         | spare   |  CRC 16 |
++------------------+-------------------+---------+---------+
+
+where the "type & address field has the following structure:
+
+    8      3     4          5        12
++--------+---+--------+----------+---------+
+|  type  |bus|  dev   | function | offset  |
++--------+---+--------+----------+---------+
+MSB					  LSB
+
+Type can be:
+
+        00000000 -> read byte
+	00000001 -> write byte
+	00000010 -> read word
+	00000011 -> write word
+	00000100 -> read dword
+	00000101 -> write dword
+	00000110 -> read quad
+	00000111 -> write quad
+	01000000 -> read byte reply (OK)
+	....
+	01000111 -> write quad reply (OK)
+	01100000 -> read byte reply (ERROR)
+	....
+	01100111 -> write quad reply (ERROR)
+	1XXXXXXX -> fill data bit (see below)
+
+When bit 7 of type is 0, only one object is read/written
+(byte, word, dword, quad).
+When bit 7 of type is set (fill_data bit), data[] is filled with as many
+objects as possible (8 bytes, 4 words, 2 dwords, 1 quad). This is to save
+bandwith and avoid problems in case of different endianness between MPU and
+MCU (we could of course for example read/write a quad, but then bytes should
+be swapped in a different way depending on the actual type of the read/written
+objects, and this would make life more complicated).
+
+An address is made of the following fields:
+
+   * bus (0 .. 7): select one of the PHY links which might be connected to
+   the MPU (max 8 links)
+   * dev (0 .. 15): in case the phy link is actually a bus, this field selects
+   the node we want to talk to.
+   * function (0 .. 31): this field selects one of the peripheral modules on
+   the MPU (each peripheral is called a "function", with a pci-like term).
+   * offset (0 .. 4095): each MPU peripheral is assigned a "virtual" memory
+   space. This field contains the offset at which the specified read or
+   write operation will be done.
+
+Each request frame shall have a reply. In case of errors (bit 5 of type = 1),
+the first data dword contains an error code.
+
+Protocol endianness is LITTLE. This choice has been made to make life easier
+on MCUs, which are often little endian ARM machines.
+
+An mcuio device is not required to implement any request queue: each request
+to a device must be followed by a reply, no other request is allowed before a
+reply is sent by the target function or a timer expires. Actual reply tiemouts
+are PHY specific.
+
+*** FUNCTIONS MEMORY MAPS ***
+
+As stated in the previous paragraph, every function has a 12 bits memory space,
+the leading 8 bytes of which always contain a descriptor with the following
+[mandatory] format:
+
+   	  16 bits         16 bits
+   +-----------------+-------------+ 0
+   |    vendor       |   device id |
+   +-----------------+------+------+ 4
+   |	 class code  (24)   | rev  |
+   +------------------------+------+ 8
+   |				   |
+   |				   |
+   |				   |
+   +-------------------------------+ 0x0fff
+MSB				   LSB
+
+[ yes, this also resembles a pci header ].
+The following class codes have been defined at present:
+
+------------------+--------------
+	 CLASS	  |   CODE
+------------------+--------------
+ HOST CONTROLLER  |	1
+------------------+--------------
+       GPIO       |	2
+------------------+--------------
+        ADC	  |	3
+------------------+--------------
+        DAC       |	4
+------------------+--------------
+        PWM	  |	5
+------------------+--------------
+
+A standard memory map shall be defined for each of the classes (see the
+maps directory). Software aboard the mcu should preferably comply to the
+standard map, but if that is not possible, exceptions shall be handled via
+the vendor/device id mechanism.
+
+HOST CONTROLLER devices are special: they are mcuio devices, but actually
+live on the MPU. An host controller is always device 0, function 0 on its
+bus and it is responsible of enumerating connected devices.
+
+
+*** SPONTANEOUS MESSAGES FROM THE MCU ***
+
+In principle the protocol has a peer-to-peer structure. This allows the MCU
+to notify the MPU about meaningful events (such as GPIOs status changes, for
+instance).
+Some physical layers, though, do not allow the MCU to send spontaneous
+requests. In such cases an MPU gpio shall be used to interface the two machines:
+
+
++---------------+      	    +------------+
+|		|   PHY     |		 |
+|      MPU     	|<--------->|    MCU	 |
+|      		|	    |	 	 |
++---------------+   +---    +------------+
+          ^	    | Event         |
+	  |	----+		    |
+	  +-------------------------+
+
+
+T.B.D.: define details.
+
+On the other hand, when the physical layer allows the MCU to send spintaneous
+messages, events are represented as writes to predefined locations within
+some function of device 0 (the MPU), much like MSI interrupts.
+
+T.B.D.: define details
diff --git a/Documentation/mcuio/tests.txt b/Documentation/mcuio/tests.txt
new file mode 100644
index 0000000..5919213
--- /dev/null
+++ b/Documentation/mcuio/tests.txt
@@ -0,0 +1,85 @@
+
+This document describes a useful configuration which can be used with no
+actual MCU hardware. Things can be setup according to the following diagram:
+
+
+       	    	       	  		         MPU
+                                     +------------------------------+
++---------------------+		     |                          US  |
+|                     |   socket     |   [master]        [slave]    |
+| MCU simulator on PC |<--------------->/dev/ptsX       /dev/ptsY   |
+|                     |              | 	    |              ^	    |
++---------------------+              |      |              |        |
+                                     |      |              |        |
+                                     +======V==============|========+
+				     |    +--------------------+
+				     |	  |   mcuio-hc-ldisc   |    |
+				     |    +--------------------+    |
+				     |                          KS  |
+				     +------------------------------+
+
+US             = User Space
+KS             = Kernel Space
+mcuio-hc-ldisc = module implementing the line discipline based mcuio
+                 host controller
+
+
+The mcuio protocol has been implemented as a single UNIX process using a
+slightly modified version of the bathos operating system (see
+ git@gitorious.org:rubi/bathos.git for the original version).
+
+/dev/ptsX and /dev/ptsY are respectively the master and slave side of a
+pseudo-terminal. A process (not shown in the picture) sets the slave discipline
+on /dev/ptsY via TIOCSETD and keeps the terminal open:
+
+int main(int argc, char *argv[])
+{
+        int d = 29;
+        int fd = open(argv[1], O_RDONLY);
+
+        if (fd < 0) {
+                perror("open");
+                exit(1);
+        }
+        if (ioctl(fd, TIOCSETD, &d) < 0) {
+                perror("TIOCSETD");
+                exit(2);
+        }
+        while(1)
+                sleep(10);
+}
+
+Here's some command line doing the trick:
+
+# Run this on the MCU simulator machine
+# Setup a tcp server on port 10000. When a connection with the client is
+# established, the server connects the resulting socket with file descriptors
+# 3 and 4, and finally executes bathos.
+socat TCP4-LISTEN:10000 EXEC:/home/develop/bathos/bathos,fdin=3,fdout=4
+
+# Run this on the MPU (tested on the yun board, linux-3.8.3)
+# Load the mcuio modules
+/sbin/insmod mcuio.ko
+/sbin/insmod mcuio-hc-dev.ko
+/sbin/insmod mcuio-soft-hc.ko
+/sbin/insmod mcuio-hc-drv.ko
+/sbin/insmod mcuio-hc-ldisc.ko
+# Allocate a pseudotty pair, connect to the server socket running on the MCU
+# simulator and run set_ldisc on the slave side of the pseudoterminal
+socat  -s -x PTY,link=/tmp/spty TCP4:192.168.1.1:10000 & \
+       set_ldisc $(readlink /tmp/spty)
+
+
+A dummy (zero) function device has been implemented on the mcu simulator, so
+that the resulting devices under the MPU are:
+
+root@dello:/sys/bus/mcuio# ls /sys/bus/mcuio/devices/
+0:0.0  0:1.0
+
+Where 0:0.0 is the line discipline host controller and 0:1.0 is the dummy
+device on the mcu:
+
+root@dello:/sys/bus/mcuio# cat devices/0\:1.0/device 
+0xdead
+root@dello:/sys/bus/mcuio# cat devices/0\:1.0/vendor 
+0xbeef
-- 
1.8.5.2.233.g932f7e4

