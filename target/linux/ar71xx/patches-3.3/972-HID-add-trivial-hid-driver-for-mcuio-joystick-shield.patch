From dcfd498471f6b7b823bf8e83f5e4e61ae5cda909 Mon Sep 17 00:00:00 2001
From: Davide Ciminaghi <ciminaghi@gnudd.com>
Date: Fri, 9 May 2014 16:38:33 +0200
Subject: [PATCH 972/973] HID: add trivial hid driver for mcuio joystick shield

Signed-off-by: Davide Ciminaghi <ciminaghi@gnudd.com>
---
 drivers/hid/Kconfig        |  6 ++++
 drivers/hid/Makefile       |  1 +
 drivers/hid/hid-mcuio-js.c | 72 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 79 insertions(+)
 create mode 100644 drivers/hid/hid-mcuio-js.c

diff --git a/drivers/hid/Kconfig b/drivers/hid/Kconfig
index a421abd..c480dbd 100644
--- a/drivers/hid/Kconfig
+++ b/drivers/hid/Kconfig
@@ -669,6 +669,12 @@ config HID_ZYDACRON
 	---help---
 	Support for Zydacron remote control.
 
+config HID_MCUIO_JS
+        tristate "MCUIO joystick shield support"
+	depends on MCUIO
+	---help---
+	Support for mcuio joystick shield.
+
 endmenu
 
 endif # HID_SUPPORT
diff --git a/drivers/hid/Makefile b/drivers/hid/Makefile
index 8aefdc9..9e84d06 100644
--- a/drivers/hid/Makefile
+++ b/drivers/hid/Makefile
@@ -87,6 +87,7 @@ obj-$(CONFIG_HID_ZYDACRON)	+= hid-zydacron.o
 obj-$(CONFIG_HID_WACOM)		+= hid-wacom.o
 obj-$(CONFIG_HID_WALTOP)	+= hid-waltop.o
 obj-$(CONFIG_HID_WIIMOTE)	+= hid-wiimote.o
+obj-$(CONFIG_HID_MCUIO_JS)	+= hid-mcuio-js.o
 
 obj-$(CONFIG_USB_HID)		+= usbhid/
 obj-$(CONFIG_USB_MOUSE)		+= usbhid/
diff --git a/drivers/hid/hid-mcuio-js.c b/drivers/hid/hid-mcuio-js.c
new file mode 100644
index 0000000..cfac044
--- /dev/null
+++ b/drivers/hid/hid-mcuio-js.c
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2011 Dog Hunter SA
+ * Author: Davide Ciminaghi <ciminaghi@gnudd.com>
+ *
+ * GNU GPLv2 or later
+ */
+
+#include <linux/device.h>
+#include <linux/hid.h>
+#include <linux/input/mt.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/mcuio_ids.h>
+
+static int mcuio_js_hid_probe(struct hid_device *hdev,
+			      const struct hid_device_id *id)
+{
+	int ret;
+	hid_dbg(hdev, "%s entered\n", __func__);
+	ret= hid_parse(hdev);
+	if (ret) {
+		hid_err(hdev, "mcuio_js_hid parse failed\n");
+		return ret;
+	}
+	ret = hid_hw_start(hdev,
+			   HID_CONNECT_HIDINPUT|HID_CONNECT_HIDINPUT_FORCE);
+	if (ret) {
+		hid_err(hdev, "mcuio_js_hid hw start failed\n");
+		return ret;
+	}
+	hid_dbg(hdev, "%s ok\n", __func__);
+	return 0;
+}
+
+static void mcuio_js_hid_remove(struct hid_device *hdev)
+{
+	hid_hw_stop(hdev);
+}
+
+static const struct hid_device_id mcuio_js_hid[] = {
+	{ HID_DEVICE(BUS_VIRTUAL, MCUIO_VENDOR_DOGHUNTER,
+		     MCUIO_DEVICE_JOYSTICK_SHIELD), .driver_data = 0, },
+	{ }
+};
+MODULE_DEVICE_TABLE(hid, mcuio_js_hid);
+
+static struct hid_driver mcuio_js_hid_driver = {
+	.name = "mcuio-js-shield",
+	.id_table = mcuio_js_hid,
+	.probe = mcuio_js_hid_probe,
+	.remove = mcuio_js_hid_remove,
+};
+
+static int __init mcuio_js_hid_init(void)
+{
+	int ret;
+
+	ret = hid_register_driver(&mcuio_js_hid_driver);
+	if (ret)
+		pr_err("can't register magicmouse driver\n");
+
+	return ret;
+}
+
+static void __exit mcuio_js_hid_exit(void)
+{
+	hid_unregister_driver(&mcuio_js_hid_driver);
+}
+
+module_init(mcuio_js_hid_init);
+module_exit(mcuio_js_hid_exit);
+MODULE_LICENSE("GPL");
-- 
1.8.5.2.233.g932f7e4

