From 39abf8e8100f324e49930d8d194aa7acc0422f02 Mon Sep 17 00:00:00 2001
From: Davide Ciminaghi <ciminaghi@gnudd.com>
Date: Thu, 8 May 2014 18:21:40 +0200
Subject: [PATCH 950/973] MCUIO: add functions for removing host controller
 devices

Signed-off-by: Davide Ciminaghi <ciminaghi@gnudd.com>
---
 drivers/mcuio/mcuio-hc-dev.c  | 16 +++++++++++++---
 drivers/mcuio/mcuio-soft-hc.c | 19 ++++++++++++++++++-
 include/linux/mcuio-hc.h      | 23 ++++++++++++++++++++++-
 3 files changed, 53 insertions(+), 5 deletions(-)

diff --git a/drivers/mcuio/mcuio-hc-dev.c b/drivers/mcuio/mcuio-hc-dev.c
index 9734829..8463391 100644
--- a/drivers/mcuio/mcuio-hc-dev.c
+++ b/drivers/mcuio/mcuio-hc-dev.c
@@ -17,6 +17,7 @@
 #include <linux/circ_buf.h>
 #include <linux/mcuio_ids.h>
 #include <linux/mcuio-hc.h>
+#include <linux/mcuio-soft-hc.h>
 #include "mcuio-internal.h"
 
 static struct mcuio_device_id default_hc_id = {
@@ -25,12 +26,13 @@ static struct mcuio_device_id default_hc_id = {
 	.class = MCUIO_CLASS_HOST_CONTROLLER,
 };
 
-static void mcuio_hc_dev_release(struct device *dev)
+void mcuio_hc_dev_default_release(struct device *dev)
 {
 	struct mcuio_device *mdev = to_mcuio_dev(dev);
 	mcuio_put_bus(mdev->bus);
 	kfree(mdev);
 }
+EXPORT_SYMBOL(mcuio_hc_dev_default_release);
 
 static const struct attribute_group *hc_dev_attr_groups[] = {
 	&mcuio_default_dev_attr_group,
@@ -39,12 +41,12 @@ static const struct attribute_group *hc_dev_attr_groups[] = {
 
 static struct device_type hc_device_type = {
 	.name = "mcuio-host-controller",
-	.release = mcuio_hc_dev_release,
 	.groups = hc_dev_attr_groups,
 };
 
 struct device *mcuio_add_hc_device(struct mcuio_device_id *id,
-				   struct mcuio_hc_platform_data *plat)
+				   struct mcuio_hc_platform_data *plat,
+				   void (*release)(struct device *))
 {
 	int b, ret = -ENOMEM;
 	struct mcuio_device *d = kzalloc(sizeof(*d), GFP_KERNEL);
@@ -60,6 +62,8 @@ struct device *mcuio_add_hc_device(struct mcuio_device_id *id,
 	d->fn = 0;
 	d->id = id ? *id : default_hc_id;
 	d->dev.platform_data = plat;
+	hc_device_type.release = release ? release :
+	    mcuio_hc_dev_default_release;
 	ret = mcuio_device_register(d, &hc_device_type, NULL);
 	if (ret < 0)
 		goto err1;
@@ -73,6 +77,12 @@ err0:
 }
 EXPORT_SYMBOL(mcuio_add_hc_device);
 
+void mcuio_del_hc_device(struct device *dev)
+{
+	mcuio_device_unregister(to_mcuio_dev(dev));
+}
+EXPORT_SYMBOL(mcuio_del_hc_device);
+
 MODULE_AUTHOR("Davide Ciminaghi");
 MODULE_DESCRIPTION("MCUIO host controller code");
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/mcuio/mcuio-soft-hc.c b/drivers/mcuio/mcuio-soft-hc.c
index 08ab5e7..ccb12c6 100644
--- a/drivers/mcuio/mcuio-soft-hc.c
+++ b/drivers/mcuio/mcuio-soft-hc.c
@@ -212,6 +212,22 @@ static struct mcuio_device_id default_soft_hc_id = {
 	.class = MCUIO_CLASS_SOFT_HOST_CONTROLLER,
 };
 
+static void mcuio_soft_hc_release(struct device *device)
+{
+	struct mcuio_hc_platform_data *plat = dev_get_platdata(device);
+	struct mcuio_soft_hc *shc;
+	if (!plat) {
+		WARN_ON(1);
+		return;
+	}
+	shc = plat->data;
+	irq_set_handler(shc->irqno, NULL);
+	irq_set_chip(shc->irqno, NULL);
+	irq_free_desc(shc->irqno);
+	kfree(shc);
+	mcuio_hc_dev_default_release(device);
+}
+
 struct device *mcuio_add_soft_hc(struct mcuio_device_id *id,
 				 const struct mcuio_soft_hc_ops *ops,
 				 void *priv)
@@ -227,7 +243,8 @@ struct device *mcuio_add_soft_hc(struct mcuio_device_id *id,
 	}
 	plat->setup_regmap = mcuio_soft_hc_setup_regmap;
 	plat->data = shc;
-	return mcuio_add_hc_device(id ? id : &default_soft_hc_id, plat);
+	return mcuio_add_hc_device(id ? id : &default_soft_hc_id, plat,
+				   mcuio_soft_hc_release);
 }
 EXPORT_SYMBOL(mcuio_add_soft_hc);
 
diff --git a/include/linux/mcuio-hc.h b/include/linux/mcuio-hc.h
index f942b68..a638afe 100644
--- a/include/linux/mcuio-hc.h
+++ b/include/linux/mcuio-hc.h
@@ -43,9 +43,30 @@ struct mcuio_hc_platform_data {
  *
  * @id: pointer to mcuio device's id
  * @plat: pointer to platform data structure
+ * @release: pointer to custom release function
  */
 struct device *mcuio_add_hc_device(struct mcuio_device_id *id,
-				   struct mcuio_hc_platform_data *plat);
+				   struct mcuio_hc_platform_data *plat,
+				   void (*release)(struct device *));
+
+/*
+ * mcuio_del_hc_device(): remove host controller device
+ *
+ * @dev: pointer to relevant struct device
+ */
+void mcuio_del_hc_device(struct device *);
+
+/*
+ * mcuio_hc_dev_default_release(): default release for hc devices
+ *
+ * @dev: pointer to corresponding device to be deleted
+ *
+ * If an hc is created with custom release function, such function can
+ * invoke mcuio_hc_dev_default_release() to perform some common release
+ * operations (freeing memory and releasing the mcuio bus number)
+ */
+void mcuio_hc_dev_default_release(struct device *dev);
+
 
 
 #endif /* __HOST_CONTROLLER_H__ */
-- 
1.8.5.2.233.g932f7e4

