This patch provides most of the patches for speech-tools for Debian GNU/Linux,
to provide Debian specific building of speech-tools.

--- a/config/compilers/gcc_defaults.mak
+++ b/config/compilers/gcc_defaults.mak
@@ -39,7 +39,7 @@
  ###########################################################################
 
 CC=gcc
-CXX=gcc
+CXX=g++
 ifeq ($(OSTYPE),Darwin)
 CXX=g++
 endif
@@ -47,8 +47,9 @@
 COMPILER_DESC=FSF gcc
 COMPILER_VERSION_COMMAND=$(CXX) -v 2>&1 | tail -1 | sed -e 's/^....//'
 
-CFLAGS  = $(GCC_SYSTEM_OPTIONS) $(CC_OTHER_FLAGS)
-CXXFLAGS  =  $(GCC_SYSTEM_OPTIONS) -fno-implicit-templates $(CC_OTHER_FLAGS)
+CFLAGS    += $(GCC_SYSTEM_OPTIONS) $(CC_OTHER_FLAGS) $(CPPFLAGS)
+CXXFLAGS  +=  $(GCC_SYSTEM_OPTIONS) $(CC_OTHER_FLAGS) $(CPPFLAGS)
+LINKFLAGS +=  $(LDFLAGS)
 
 DEBUG_CCFLAGS   = -g
 DEBUG_CXXFLAGS  = -g
@@ -81,7 +82,7 @@
 SHARED_LINKFLAGS = 
 
 ifndef GCC_MAKE_SHARED_LIB
-    MAKE_SHARED_LIB = $(CXX) -shared -fno-shared-data -o XXX
+    MAKE_SHARED_LIB = $(CXX) -shared -o XXX -Wl,-soname -Wl,YYY
 else
     MAKE_SHARED_LIB = $(GCC_MAKE_SHARED_LIB)
 endif
@@ -98,9 +99,10 @@
 ## The -lgcc here is redundant - gcc does this anyway - but it
 ## helps java know what needs to be loaded.
 
-COMPILERLIBS= $(COMPILER_LIBS_DIR:%=-L%) -lstdc++
+COMPILERLIBS= $(COMPILER_LIBS_DIR:%=-L%)
 
 ## special ways of doing things, blank means default
+STATIC_LINKFLAGS = -Dstatic
 
 MAKE_DEPEND_C = $(CC) -MM $(INCLUDES) $(TEMPLATES) $(TEMPLATE_SPECIFIC)
 MAKE_DEPEND_CXX = $(CC) -MM $(INCLUDES) $(TEMPLATES) $(TEMPLATE_SPECIFIC)
--- a/config/project.mak
+++ b/config/project.mak
@@ -103,12 +103,15 @@
 
 PROJECT_LIBRARY_USES_estjava = estbase eststring
 
-PROJECT_LIBRARY_VERSION_estools = $(PROJECT_VERSION).1
-PROJECT_LIBRARY_VERSION_estbase = $(PROJECT_VERSION).1
-PROJECT_LIBRARY_VERSION_eststring = 1.2
-PROJECT_LIBRARY_VERSION_estjava = $(PROJECT_VERSION).1
+# These are used for the SONAME fields in ELF libraries
+PROJECT_LIBRARY_VERSION_estools = $(PROJECT_MAJOR_VERSION)
+PROJECT_LIBRARY_VERSION_estbase = $(PROJECT_MAJOR_VERSION)
+PROJECT_LIBRARY_VERSION_eststring = $(PROJECT_MAJOR_VERSION)
+PROJECT_LIBRARY_VERSION_estjava = $(PROJECT_MAJOR_VERSION)
 
 PROJECT_LIBRARY_NEEDS_SYSLIBS_estjava=1
+# This line allows estbase to link with libpulse among others
+PROJECT_LIBRARY_NEEDS_SYSLIBS_estbase=1
 
 PROJECT_DEFAULT_LIBRARY = estools
 
--- a/config/rules/bin_process.mak
+++ b/config/rules/bin_process.mak
@@ -59,6 +59,7 @@
 		Makefile ) : ;; \
 		VCLocalRules ) : ;; \
 		RCS|CVS ) : ;; \
+		SCCS|BitKeeper ) : ;; \
 		* ) $(ECHO_N) " $$i"; $(RM) -f "$$i";; \
 	    esac \
 	done
--- a/config/rules/library.mak
+++ b/config/rules/library.mak
@@ -102,15 +102,44 @@
  ##                                                                       ##
  ###########################################################################
 
+libestools.so : libestools.a
+	echo Make Shared Library estools
+	if [ ! -d shared_space ] ; then mkdir shared_space ; else $(RM) -f shared_space/*.o ; fi
+	(cd shared_space ; $(AR) x ../$< )
+	echo Link Shared Library estools
+	if [ -n "$(PROJECT_LIBRARY_NEEDS_SYSLIBS_estools)" ] ; then libs='$(JAVA_PROJECT_LIBS)' ; fi ;\
+	$(subst YYY,$@.$(PROJECT_LIBRARY_VERSION_estools),\
+		$(subst XXX,$@.$(PROJECT_VERSION),$(MAKE_SHARED_LIB))) \
+		shared_space/*.o $(PROJECT_LIBRARY_USES_estools:%=-L. -l%) $$libs -L. -lestbase -leststring -lncurses
+	$(RM) -f shared_space/*.o $@
+	-ln -sf $@.$(PROJECT_VERSION) $@.$(PROJECT_LIBRARY_VERSION_estools)
+	-ln -sf $@.$(PROJECT_LIBRARY_VERSION_estools) $@
+
+libestbase.so : libestbase.a
+	echo Make Shared Library estbase
+	if [ ! -d shared_space ] ; then mkdir shared_space ; else $(RM) -f shared_space/*.o ; fi
+	(cd shared_space ; $(AR) x ../$< )
+	echo Link Shared Library estbase
+	if [ -n "$(PROJECT_LIBRARY_NEEDS_SYSLIBS_estbase)" ] ; then libs='$(JAVA_PROJECT_LIBS)' ; fi ;\
+	$(subst YYY,$@.$(PROJECT_LIBRARY_VERSION_estbase),\
+		$(subst XXX,$@.$(PROJECT_VERSION),$(MAKE_SHARED_LIB))) \
+		shared_space/*.o $(PROJECT_LIBRARY_USES_estbase:%=-L. -l%) $$libs -L.
+	$(RM) -f shared_space/*.o $@
+	-ln -sf $@.$(PROJECT_VERSION) $@.$(PROJECT_LIBRARY_VERSION_estbase)
+	-ln -sf $@.$(PROJECT_LIBRARY_VERSION_estbase) $@
+
 lib%.so : lib%.a
-	@echo Make Shared Library $*
-	@if [ ! -d shared_space ] ; then mkdir shared_space ; else $(RM) -f shared_space/*.o ; fi
-	@(cd shared_space ; $(AR) x ../$< ) 
-	@echo Link Shared Library $*
+	echo Make Shared Library $*
+	if [ ! -d shared_space ] ; then mkdir shared_space ; else $(RM) -f shared_space/*.o ; fi
+	(cd shared_space ; $(AR) x ../$< )
+	echo Link Shared Library $*
 	if [ -n "$(PROJECT_LIBRARY_NEEDS_SYSLIBS_$*)" ] ; then libs='$(JAVA_PROJECT_LIBS)' ; fi ;\
-	$(subst XXX,$@.$(PROJECT_LIBRARY_VERSION_$*),$(MAKE_SHARED_LIB)) shared_space/*.o $(PROJECT_LIBRARY_USES_$*:%=-L. -l%) $$libs
-	@$(RM) -f shared_space/*.o $@
-	@ln -s $@.$(PROJECT_LIBRARY_VERSION_$*) $@
+	$(subst YYY,$@.$(PROJECT_LIBRARY_VERSION_$*),\
+		$(subst XXX,$@.$(PROJECT_VERSION),$(MAKE_SHARED_LIB))) \
+		shared_space/*.o $(PROJECT_LIBRARY_USES_$*:%=-L. -l%) $$libs
+	$(RM) -f shared_space/*.o $@
+	-ln -sf $@.$(PROJECT_VERSION) $@.$(PROJECT_LIBRARY_VERSION_$*)
+	-ln -sf $@.$(PROJECT_LIBRARY_VERSION_$*) $@
 
  ###########################################################################
  ##                                                                       ##
--- a/config/rules/targets.mak
+++ b/config/rules/targets.mak
@@ -71,7 +71,7 @@
 	@ for i in $(ALL_DIRS) ; \
 	do \
 	   echo "clean in $(DIRNAME)/$$i" ;\
-	   $(MAKE) --no-print-directory -C $$i clean ; \
+	   $(MAKE) --no-print-directory -C $$i NO_DEPEND=1 clean ; \
 	done
 endif
 ifdef EXTRA_LIB_BUILD_DIRS
--- a/config/system.sh
+++ b/config/system.sh
@@ -60,8 +60,7 @@
 	sed -e 's/^\([^.]*\)\(\.[^-. ]*\).*/\1\2/'`
 
 # Sort out various flavours of Linux
-if [ "$OSTYPE" = Linux ]
-    then
+case "$OSTYPE" in Linux|GNU|GNU/*)
     if [ -f "/etc/redhat-release" ]
 	then
 	OSTYPE=RedHatLinux
@@ -74,7 +73,8 @@
 	# Generic unknown GNU/Linux system.
 	OSTYPE=Linux
     fi
-fi
+;;
+esac
 
 # Make sure we actually have a .mak file for it, otherwise fall back
 # to sensible defaults (for example, kernel version and architecture
